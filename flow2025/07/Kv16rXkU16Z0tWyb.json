{
  "active": false,
  "connections": {
    "Config": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Create sub path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create sub path": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get many workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Get many workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many workflows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-03T12:00:19.839Z",
  "id": "Kv16rXkU16Z0tWyb",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Upload Workflows To Github",
  "nodes": [
    {
      "parameters": {},
      "id": "762d7cd1-92b2-4d23-9e76-288eae1dd420",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -80,
        -180
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 731.7039821513649,
        "width": 1910.7813046051347,
        "color": 6
      },
      "id": "59264cf1-0e7b-493f-ae92-4ad7ef493bf0",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -560,
        200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "92c4bbcb-e6df-40c5-9d55-b0c8dcb431d7",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -500,
        580
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "7d5bd7cf-5c92-4a80-b2da-24c285667d51",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        1160,
        400
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "d3f2b6a0-fcf8-4e29-82b7-e19f987f50de",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        120,
        280
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1ee93c40-1f7a-4554-8913-70d59dcbf949",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        -120,
        300
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "4e6aed5f-ba50-443b-b58c-234669f98a9f",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        -120,
        560
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "b4cc6f60-e9d9-4179-a6ff-7154afd97225",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        80,
        560
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "c5bb7d0a-6ba8-48b5-8dde-09220426ee22",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        480,
        560
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "26ae87de-1a17-42cd-a08c-a6d17fa8f072",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        700,
        400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "143c46f8-65c4-476a-9ab1-8b01dc927166",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        700,
        560
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "fbdef682-7484-4cc9-aa87-2707c288c1e2",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        700,
        760
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": ""
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": ""
        },
        "filePath": "={{ $('Config').item.json.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "fb49f406-d397-49a2-ada0-3f631f252e5f",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        920,
        760
      ],
      "typeVersion": 1,
      "webhookId": "c527449b-a21a-42a8-be8a-e02f106aacc6",
      "credentials": {
        "githubApi": {
          "id": "FcPNnpSaBJH7qPhD",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": ""
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": ""
        },
        "filePath": "={{ $('Config').item.json.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "0bd14385-c6d9-4679-990d-4404bb9f33d0",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        920,
        560
      ],
      "typeVersion": 1,
      "webhookId": "ce94ec1f-cd68-4f06-86d7-6504901abf9e",
      "credentials": {
        "githubApi": {
          "id": "FcPNnpSaBJH7qPhD",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f427a218-849d-4a36-846b-74e8044d7efa",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        520,
        -80
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 1,
              "triggerAtMinute": 33
            }
          ]
        }
      },
      "id": "50b7bfe7-aa0f-419b-8d3c-2698e4249434",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -80,
        20
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
              "name": "subPath",
              "type": "string",
              "value": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "fbd46ce8-a144-4ffb-a64b-7c331cb37fec",
      "name": "Create sub path",
      "type": "n8n-nodes-base.set",
      "position": [
        280,
        560
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
        "height": 417,
        "width": 385,
        "color": 4
      },
      "id": "a369115e-cf96-4d24-9366-85fb720a2aae",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -560,
        -260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 416.1856906618075,
        "width": 1272.6408145680155,
        "color": 7
      },
      "id": "0e03d7a1-1261-4689-821b-5a2bca7e8818",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -120,
        -260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "e1a8ffad-935d-475a-ac67-fc4485fb74a5",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        780,
        -60
      ],
      "typeVersion": 1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name}}",
          "mode": "name"
        },
        "filePath": "={{ $('Config').item.json.repo_path }}{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/{{$json.id}}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "44973424-b8f6-480b-852c-86ab4e533ee4",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        -320,
        300
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "5c415290-bac6-4f85-ae50-e31185c27902",
      "credentials": {
        "githubApi": {
          "id": "FcPNnpSaBJH7qPhD",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
              "name": "repo_owner",
              "type": "string",
              "value": "=xxx675702999"
            },
            {
              "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
              "name": "repo_name",
              "type": "string",
              "value": "=n8n_flow"
            },
            {
              "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
              "name": "repo_path",
              "type": "string",
              "value": "=flow"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "5187bcd3-304e-4969-b6d4-a8df5ede907c",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "position": [
        -320,
        580
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "61048065-9534-45bd-ace8-1ffb2315a009",
      "name": "Get many workflows",
      "type": "n8n-nodes-base.n8n",
      "position": [
        320,
        -80
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "pa2JIoBeGZgXDkpm",
          "name": "n8n account"
        }
      }
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "createdAt": "2025-07-01T15:21:48.191Z",
          "updatedAt": "2025-07-01T15:34:21.000Z",
          "id": "0pYx2TzVqCPMQI0E",
          "name": "RSS to Notion via AI",
          "active": false,
          "isArchived": true,
          "nodes": [
            {
              "name": "RSS Feed Reader",
              "type": "n8n-nodes-base.rssFeedRead",
              "typeVersion": 1,
              "position": [
                250,
                400
              ],
              "parameters": {
                "url": "={{ $parameter.rssUrl }}"
              },
              "id": "f1e9e7bd-9f77-4ce0-b0ee-8d14deeffe7c"
            },
            {
              "name": "AI Processor",
              "type": "n8n-nodes-base.openAi",
              "typeVersion": 1,
              "position": [
                600,
                400
              ],
              "parameters": {
                "resource": "chat",
                "model": "gpt-3.5-turbo",
                "temperature": 0.7,
                "messages": [
                  {
                    "role": "system",
                    "content": "Summarize the key points from this article in 3 bullet points in Chinese."
                  },
                  {
                    "role": "user",
                    "content": "Article content:\n\n{{ $json.description }}"
                  }
                ]
              },
              "credentials": {
                "openAiApi": "={{ $credentials.openAi }}"
              },
              "id": "388e83ac-425d-466d-aea8-424959e4584c"
            },
            {
              "name": "Notion Create Page",
              "type": "n8n-nodes-base.notion",
              "typeVersion": 1,
              "position": [
                950,
                400
              ],
              "parameters": {
                "resource": "databasePage",
                "operation": "create",
                "databaseId": "={{ $parameter.notionDatabaseId }}",
                "properties": {
                  "title": {
                    "title": [
                      {
                        "text": {
                          "content": "{{ $json.title }}"
                        }
                      }
                    ]
                  },
                  "Summary": {
                    "rich_text": [
                      {
                        "text": {
                          "content": "{{ $json.messages.0.content }}"
                        }
                      }
                    ]
                  }
                }
              },
              "credentials": {
                "notionApi": "={{ $credentials.notion }}"
              },
              "id": "c97bf72c-459a-4084-924a-a0d98084a168"
            }
          ],
          "connections": {
            "RSS Feed Reader": {
              "main": [
                {
                  "node": "AI Processor",
                  "type": "main"
                }
              ]
            },
            "AI Processor": {
              "main": [
                {
                  "node": "Notion Create Page",
                  "type": "main"
                }
              ]
            }
          },
          "settings": {
            "saveExecutionProgress": true,
            "saveManualExecutions": true,
            "saveDataErrorExecution": "all",
            "saveDataSuccessExecution": "all",
            "executionTimeout": 3600,
            "timezone": "UTC"
          },
          "staticData": null,
          "meta": null,
          "pinData": null,
          "versionId": "b5ac2480-2cb7-4f4c-8e63-6a3b52ae8496",
          "triggerCount": 0,
          "tags": []
        }
      }
    ]
  },
  "repo_name": "n8n_flow",
  "repo_owner": "xxx675702999",
  "repo_path": "flow",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-03T16:51:54.000Z",
  "versionId": "6bfbb04c-9184-4f3d-bf50-ed31f7fc87fb"
}